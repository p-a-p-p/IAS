-- Create the attendance_system schema
CREATE SCHEMA IF NOT EXISTS attendance_system;

USE attendance_system;

-- 1. Create Departments Table
CREATE TABLE IF NOT EXISTS departments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL
);

-- 2. Create Admins Table
CREATE TABLE IF NOT EXISTS admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL  -- Store hashed passwords
);

-- 3. Create Staff Table
CREATE TABLE IF NOT EXISTS staff (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,  -- Store hashed passwords
    department_id INT,
    CONSTRAINT fk_staff_department FOREIGN KEY (department_id) 
        REFERENCES departments(id) 
        ON DELETE SET NULL
);

-- 4. Create Users Table
CREATE TABLE IF NOT EXISTS users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,  -- Store hashed passwords
    department_id INT,
    CONSTRAINT fk_users_department FOREIGN KEY (department_id) 
        REFERENCES departments(id) 
        ON DELETE SET NULL
);

-- 5. Create Events Table
CREATE TABLE IF NOT EXISTS events (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    event_date DATE NOT NULL,
    created_by INT,
    department_id INT,
    CONSTRAINT fk_event_creator FOREIGN KEY (created_by) 
        REFERENCES staff(id) 
        ON DELETE SET NULL,
    CONSTRAINT fk_event_department FOREIGN KEY (department_id) 
        REFERENCES departments(id) 
        ON DELETE SET NULL
);

-- 6. Create Attendance Table
CREATE TABLE IF NOT EXISTS attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT,
    student_id VARCHAR(10),
    event_id INT NOT NULL,
    department_id INT NOT NULL,
    attended_on DATE NOT NULL,
    CONSTRAINT chk_student_id_format CHECK (student_id REGEXP '^[0-9]{4}-[0-9]{4}-[0-9]$'),
    CONSTRAINT fk_attendance_user FOREIGN KEY (user_id) 
        REFERENCES users(id) 
        ON DELETE CASCADE,
    CONSTRAINT fk_attendance_event FOREIGN KEY (event_id) 
        REFERENCES events(id) 
        ON DELETE CASCADE,
    CONSTRAINT fk_attendance_department FOREIGN KEY (department_id) 
        REFERENCES departments(id) 
        ON DELETE SET NULL
);

-- 7. Drop Student List Table (if exists)
DROP TABLE IF EXISTS student_list;

-- 8. Create Student List Table
CREATE TABLE IF NOT EXISTS student_list (
    student_id VARCHAR(10) PRIMARY KEY,  -- Format: e.g., 1234-5678-9
    name VARCHAR(100) NOT NULL,          -- Student's full name
    course VARCHAR(100) NOT NULL,        -- Enrolled course
    year_level INT NOT NULL              -- Year level (e.g., 1, 2, 3, 4)
);

